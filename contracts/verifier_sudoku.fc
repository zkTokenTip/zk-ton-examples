#include "imports/stdlib.fc";

;; ops
const op::verify = "op::verify"c;

;; sizes
const int verifier::P1_SIZE = 48 * 8;
const int verifier::P2_SIZE = 96 * 8;

;; input constants (IC0 is the base term)
const slice verifier::IC0 = "aca8a097ec4d0973419a55635d08f7106191e32faad59ef23aeef583a0cd33cc4f5d155c669dacaefb77c49a67d4dcbc"s;
const slice verifier::IC1 = "976baa064a70d9739778564bf95c53832b24e6b5affcbbb729f0b1651d54c53e736b76b7a821b24743d9ba9dc67d8634"s;
const slice verifier::IC2 = "81ec65333b05e0e8fc0b1f7ff075a4b31a1df9e4a2f5081c86c4f728ad0358df08809ead7c439fd2e4f42d9885db2b65"s;
const slice verifier::IC3 = "b91325f74de4e3a9076fdf2c7aad54654a49d9a33379437ae4dfaa32b56c86806cfccd6b612a52e57fabe87e3e403132"s;
const slice verifier::IC4 = "8e45aea2a480a2db346f8f4075fbe1b8f8e1508266cf818554dfd9173f1f90186361919bbb4b18685bf279f67fb5a329"s;
const slice verifier::IC5 = "b712910775c62abe64345b8a0717d31d87593f1e1dee0dbc9177cffc6c610f0cd014d6c2fc22b8867031ef7491968475"s;
const slice verifier::IC6 = "af60d2ee85eac32e322df0f2bde65f6762e6e5b3e9fcd587292ad5df94bcfdfbcbbbf1429697d61236d9f28f218a8f71"s;
const slice verifier::IC7 = "95cbccf5b961d08d1f53c7cc40c6539c51af25a31cca929301d691973aec4b3d51646c5a04a81fa5dcb5f904ce46021e"s;
const slice verifier::IC8 = "b2b755e7c9b99a2cc63015e1fae70174ab42c643e0c00939799b3e25554cbb375906857b80d999046d988760e8d329ba"s;
const slice verifier::IC9 = "a46f0e916234c2178ebbaa67c68d1ebc6b86b6e16826b99ee07fcbf01d07d0281f05b8262f139c6af7bd43c5ac51014b"s;
const slice verifier::IC10 = "a0d52931e327398417676c4468b1f18e60e906f57f35c2bb667d2e6da65c2ddf817a8204ce4aa25dc58ca35ae2b9558e"s;
const slice verifier::IC11 = "ace3886e7bce3b28fb715b9d77c727f9f9feb2c995c8bb646739e1427bd1f8b826631e7a3c5291d7cc8b967861ecb174"s;
const slice verifier::IC12 = "997bc97737e1435daf392690c955d2ba28d9c4a3734b6887d0efa7eaa069538c3330d713679518f2f119205c4f346b51"s;
const slice verifier::IC13 = "957b705a124df713f0350cbdfb5b9c07f2228539d590c5248d9a6ce81dff6953622d5e089b5501fda391ccfbaf68cb91"s;
const slice verifier::IC14 = "90977ad2e28d641357c5f7d5981070e3b69d79e01a7d3f083b9323700ff95eff68493c035461f27833ab141b848531cd"s;
const slice verifier::IC15 = "99cfc34aa49360571f6def9e8da017d66fb1ea9c478adf469ce0cb5b7c8dca84450440ab259e0bc5d23d1dd903547816"s;
const slice verifier::IC16 = "a81f50f05431b5fbcaf2efd03dc0d344f751bda4e07ef2e4d7495a3fa246e8d56e12131ded6f3195826e125cfbb874f4"s;
const slice verifier::IC17 = "802341c0e7db2159a6e9d25ca1ee4536d36b5e1d47e28e85afdb63fd6ec906278da833f8cac869139b9085332e9fc65e"s;
const slice verifier::IC18 = "9080f602ccc26aec80eba57d13b757718d2cb848024ea48ea4fb67fd14f0a5f44ada406ef5e86745471b3e54d5b7ca06"s;
const slice verifier::IC19 = "802b60c978a7a3d790f75236cd1e3bcf52d0ee86cfd14dc40b40fb7315fd8fdc65ebfa1b402a8af9d54608901435721c"s;
const slice verifier::IC20 = "814db519c3fa6948c77714e2eb057c8eaf976b5ea2eeb3f472833da5020b193fd786d45dc1bc4ee57d040b080809b9a9"s;
const slice verifier::IC21 = "b2625bf9cd11bb25f51b71957196df0bc4d78a4e20bf875c406fe5a6a626b12eaea8c2c611b581da91cbcfac1cf78869"s;
const slice verifier::IC22 = "85a9743c6b5778351fbf6d87b9907d20b3c1d997b4cb677386c35c75bed813ab1ea02fac9178d5cdc49991aec2d997a0"s;
const slice verifier::IC23 = "94623adadcfeb8e7616387004f336e4ad9135dd705c600e5f6b8c7a4115aa79f2fee37d3760093aab7673dc1887ae0e5"s;
const slice verifier::IC24 = "a6ed94e52b25ea05aa45febe3c75b725d3e1cdffc867a58230d5f3d3f5ec7c5cadc19fab149c2176736b70b4ff65cc8c"s;
const slice verifier::IC25 = "8f367a97cf76a0824f2ce86a52d63df4a8d175ccf72770c987ac2b3863098600bea2ade59316bd1350d3ad8cf3c6b3fa"s;
const slice verifier::IC26 = "a7780af8695fb5b385a3fd7f94f0dcd199734b0b531141f78c8246ace9386c83dc29f05e8f9390de2b3fbe893bece88e"s;
const slice verifier::IC27 = "9938ff18c4cdb5a177e8a0e1871d41110986ff7f3be1e22e3d8e86e8852b5d585415279b8597db52990e2d4aa0ef6eb5"s;
const slice verifier::IC28 = "a8eaca01b52fda755d9614595c6b3c3315cbf67be8e89eaf09318cbea0f063a3a674318a12027d6d9d03da12b5caf4e2"s;
const slice verifier::IC29 = "b960f17ed88e350edcc216c241e2b403a1894059c1fe102063b01163a4cd54f59a705beb674d049b37f54e3b285b0871"s;
const slice verifier::IC30 = "b11c46058e31ae6bca54be8dacc7e6c10af610f25e78abcc5455eda57be203524357c18a5d2e25bce7f63334a7afb5bf"s;
const slice verifier::IC31 = "8803694435ea179fa0bd1bf738ee4c63c9b6ab8ac36bd42235aaa0a9ba19b9cc20c01c191caa2898d046158b5a2d418e"s;
const slice verifier::IC32 = "836b4df8c3d1caf65b6ad1cb56ac640fe9464a7c28e766206fb89efacecfa403bac548c6078f0e62ef284b7d6de8a95f"s;
const slice verifier::IC33 = "a80351b881e28778b4fabc61ae4aa6b2a0f95188f87e42c1e501d92f73686d40a39ad0469f1444769386def86ef7f5ed"s;
const slice verifier::IC34 = "943bf06b9532ba6a222e0ee489b2aae690e5c2ee8f1bc4aac5dccd84ef257eb485114fcad1e7b81a00b192b87a99f6cd"s;
const slice verifier::IC35 = "aee9836d96c26f3e53f354d39c73f2969797fa075c9b5af9d22fccd87f0f705090538a5a9b4df2d10eeede5ba8da6637"s;
const slice verifier::IC36 = "a7f55f609e5c7d80036baf53226d178da8b1b3bcfa1927a808ed450540515ef7c8e8aba0649981c1a5042153391346b2"s;
const slice verifier::IC37 = "b2759eb2ae408a8192be5d08d6303120518133c1aa1d385097905b639955b099c2da82ea370e5abc5cba1c5db35f19c7"s;
const slice verifier::IC38 = "a452c5c78ea55372a7b818e402eb8cfbae37741d42dbd16e9578c11e7e14cdf919749bce9eb055decd279d6214fa643d"s;
const slice verifier::IC39 = "b34b6eebe948e690baf3c0c056a523365d8b650baddbdca44a8c4c1350ee0d5965495f7a9346726e84ac4c43101e9793"s;
const slice verifier::IC40 = "998851b70c85f1ddad5ef5beeeb95db26dd406af1b6538ee2751d7a1e3520bad6607c6ef16a65304c81dd795cdcce3fa"s;
const slice verifier::IC41 = "8252064a73217b47e2492be12e1cffad5b1c558dd7e2f43b5371fce87a49841692ab8da9165b4d42b3c117211785cc14"s;
const slice verifier::IC42 = "92d6b47a377841b06de62b2bde97d51027e5b6afb3bd3966ba02a93eaec662a3ffe79bc902dbf41bb57fae0979a31e3d"s;
const slice verifier::IC43 = "9269a40a656b6c8f34e457c4c6cccd8eae76b954a09f631673c40b9ee097f5a59fd76491b82ca9678b75ed9a2579ea0a"s;
const slice verifier::IC44 = "989bc14fc9bcb038ced69fd62b4771bf345f1cc69410574a9414f342a4bd5f0b260c8903e47d0520b7e5b3a9f88ff739"s;
const slice verifier::IC45 = "88546ee67810b305708d0110d53b95b5043be19c750b84b6122bdca90331012799d7b538f72541c0763e8a7834f83b20"s;
const slice verifier::IC46 = "b074a89a679f38a14c3f4019c6b213922d34e4fae578943e4e72aa5cc33c1769ff00ba41611b6d85c3944529a3fed8b6"s;
const slice verifier::IC47 = "b850f9e5e42ee62651968fbfbf2883b962dd8cd033469da3b16dd6e880c9ff66e0057040affc801a496b3d014f20e1ed"s;
const slice verifier::IC48 = "966fa4a274dd8729b1cd09d2bea328b2f18a528ed753b4d19a3f9c5526e37820c545441677a805a462694b3892ef64dd"s;
const slice verifier::IC49 = "8314e5e3bbf1cb4ba94e893b631578564e8f36d12277293508e4bbad260d9aaeaa9e3b3c31727451742e84214fd05029"s;
const slice verifier::IC50 = "93cd7cd8a80521266326fddc5a4a108027ee1e6df185be7ec583a2c4951cd787f27c4069a19ba06002fb18a3bd49d094"s;
const slice verifier::IC51 = "93574dceb60dfdf37e971487faaf0ae41f9794b3c8ac7065e41d9fcbacd7d9a642333aca9d836a9a4ca25d2e7a5fd8d3"s;
const slice verifier::IC52 = "86f3034f81e7dfeb48d5070ea28504de951ca69b7f1e9abd64bdb4ac0cbe28f29b8a41dfa04979e77c76659a5ccdf56c"s;
const slice verifier::IC53 = "983bb972e097108bc05274f91a2c073acdff14be43624fde38ac0cc4cdcca1fbf8d67d6bbe95e0c3a9f9fec736bb1289"s;
const slice verifier::IC54 = "862270c5a328665c32ac193c84163f36030114b007ee86cdf7957072e15469f24137d9067a698f6965c51762dd208b51"s;
const slice verifier::IC55 = "a38f9398fca6751a9b1e8f3b57292fbdeadddf88817127478a7a814abc05a7a8b4c3154a61b389fdbf77b372747a2c94"s;
const slice verifier::IC56 = "966b4f9766495d96d8f6225af927e87e34d8a5fafadd98a61bfb5ce73354cacdb7a858d1325aa99ec799060bc0a5e6dc"s;
const slice verifier::IC57 = "95f933cbaa7cc6103a756a0b539f226ec39efbb4674e136e1411fe397623f910eb8b3e84d126afc010f2d6a5e0ca66f6"s;
const slice verifier::IC58 = "a7413cb4581c635f61fef145f5607a9056ba43ea22e0d003dcb8cf97b52f141ba1f0adba210f2b1cf5fcc0dffe6521d0"s;
const slice verifier::IC59 = "a2cbb24c04c60ea96ca5f89afa193ec1938fcade9b337217afe27e87561a0821eed88d32cdfdf0fd70d68ab73493f2f8"s;
const slice verifier::IC60 = "a0c2302e00aa21af66aece8eab3f2f9adebe6437a070d91588736e9f564429a138db94dee22219d4d555d5850e7b0c07"s;
const slice verifier::IC61 = "881046800d22522b8aba23d4f63e99ed5b8098776dcd661952bb6f15ccd1c333f0f3183863c2928bcb5f617dcfbe1ed3"s;
const slice verifier::IC62 = "8d5d60ccabddf7dcfd12ff8ccd10bd8f8454174aba08106c66fcb4283e05a7a1ece7a4a5dd38ddef3f195273f9bafb2e"s;
const slice verifier::IC63 = "aecda997d0bd2b700f758a6dc35c824ff896f54a4bd50cb35a42a9fb446f6bf3fc0dcb04f5119fad14c75e76dffb6907"s;
const slice verifier::IC64 = "aa59219189adecb90e16f78e67a0273c4c74801db0672ca8cd54cde2ebbb8f2795ca1fe7e7cc1e22d715d5a105aa6b3d"s;
const slice verifier::IC65 = "8d2905820f98ff9c12fbb162634887702363251bd3e3e5f0f12c633ad9783b2770d8c9937ec81503e1205fb8edfff2f4"s;
const slice verifier::IC66 = "b9faefe85f41955ce6eef7ecf04d820a99ccc8ed148a8c7c343a110f7460291fd2b5c2ce0b283df307930f41d0d0e119"s;
const slice verifier::IC67 = "aecc8ad7b1a539bb40792b83583fb2ee6a415feee10ac0c634c6b4b364c1fb003d8262737974ef10ce2e51d6263a73bc"s;
const slice verifier::IC68 = "946caa40c1d6ddd6878ffd72ded7986cc3d085ec49745fcfa8d5845f2151fbc9c02a1aade138354ac62ccab7af6f2a0d"s;
const slice verifier::IC69 = "817d7ecada163d5494bcf53aeebb14ffda36c7322d7837f3ad770c083ab763ccd7f623f497bd65c0fad1445691979930"s;
const slice verifier::IC70 = "8869b57fdf48cd877b90f9e432a6b0545a5adffbedb36aa9646e6e2f54af8dedfa2037b71047734f6279c27afe6ea5f4"s;
const slice verifier::IC71 = "85ad0ba6f0a7fea69dcbb5dca9cd61b12a78ca076e198b00be7b4fbc58519408cfc509e071d68238f63110c9aa05460a"s;
const slice verifier::IC72 = "a5a481231754c2d2e48e2086bf2142fa1a61cb11fbf3327df7f67723bc4163bb732f1a3ad520f2ec636c35e134a1ae2a"s;
const slice verifier::IC73 = "b51542bfba778d5f33b8b4a91562a9f984d214f8b90535d3bb0ae0bcb481b8719d527a5f91d38e6f0d0a615e4becee5e"s;
const slice verifier::IC74 = "a7c19ee710385103c1bd7896c6df0a17fbe95e7257f191981ce03775884d90a7218cdd7045e243483f3de5242bafb58e"s;
const slice verifier::IC75 = "986ff95eaf7a0b36c2e5ab1ead3cbe355b27ab7572fba07cbd955c284d5c6ab24e101fd2041833375e1d24aa681ef60a"s;
const slice verifier::IC76 = "80d613c316ed2e5802bb5ae71b82ec24bb0e9a47f24673ad70d350be3fc71e6ecd18c162cbfd9e3a1811bbb8958eca6a"s;
const slice verifier::IC77 = "a1dac091995874082a8563fe74bc3d6e0d0a58c70cc5f112711cd77553b12477e8b114587c2ae35545c6d128f53e0fdb"s;
const slice verifier::IC78 = "a7f19006fd70db36a44a608062df569652c5d4ff5be92a76d3a0b247f6487b8fc7fe2d2574dd931757171ac4d75a857d"s;
const slice verifier::IC79 = "8cf6aae27323e7a429725f6f795ae6eb596970522485c7ca49a5f5c91150331317a0029ab44eb4dc8d8d5a4f77b6cf7d"s;
const slice verifier::IC80 = "85c2eec96d675bcbda9afb452de8b2b89b8b41d97e65d61a2cae601342af618a42b7fe3654e62de18d017dbd1a4ba556"s;
const slice verifier::IC81 = "aadc70ebe1233452b44683fc90c5823bc014d4ae880a947a5dbeac8db8fc73f45694d96fccc35840d048df9be0893da5"s;

;; vk constants
const slice verifier::vk_gamma_2 = "93e02b6052719f607dacd3a088274f65596bd0d09920b61ab5da61bbdc7f5049334cf11213945d57e5ac7d055d042b7e024aa2b2f08f0a91260805272dc51051c6e47ad4fa403b02b4510b647ae3d1770bac0326a805bbefd48056c8c121bdb8"s;
const slice verifier::vk_delta_2 = "aecc523f51e16184d52b69af614f9346a8fa9dcdb3ccb9459ef81b9282e3108449e4bbfbd0f896d41b1d17935bd7f077185863c2a883653e5187a80cd04552bf5c978a3b476b0e382aeb4cff75424787b7edfc34bd31df0f7f336053ed6318cd"s;
const slice verifier::vk_alpha_1 = "93a3f95cbc299feeb9e9056dd15fdbaaf2015236573479597994dbf08b251c54829152d3fb818e56b1bcb289315d9304"s;
const slice verifier::vk_beta_2  = "86a610cf5d228d04dc0ba37791497053bbff0c2a341925dfce424cffb3b9a5b8bdae8a316764626c80f910344532a0ed0919b9b76da74745b2175160fcdad651e16dc9d92579802925c299b4ffb4d8c7419cb9dc8e76223be3a571d85fb27533"s;

;; public input dict settings
const int verifier::publicInputKeyLen = 32;
const int verifier::nPublic = 81;

;; error codes
const int verifier::err::public_not_present = 257;
const int verifier::err::too_many_publics = 258;

;; bls intrinsics
slice bls_g1_add(slice x, slice y) asm "BLS_G1_ADD";
slice bls_g1_neg(slice x) asm "BLS_G1_NEG";
int bls_pairing(slice x1, slice y1, slice x2, slice y2, slice x3, slice y3, slice x4, slice y4, int n) asm "BLS_PAIRING";


slice bls_g1_multiexp_7(
    slice x1, int y1,
    slice x2, int y2,
    slice x3, int y3,
    slice x4, int y4,
    slice x5, int y5,
    slice x6, int y6,
    slice x7, int y7
    , int n
) asm "BLS_G1_MULTIEXP";
slice bls_g1_multiexp_4(
    slice x1, int y1,
    slice x2, int y2,
    slice x3, int y3,
    slice x4, int y4
    , int n
) asm "BLS_G1_MULTIEXP";

(slice, slice) load_p1(slice body) impure {
    cell c = body~load_ref();
    slice s = c.begin_parse();
    slice p1 = first_bits(s, verifier::P1_SIZE);
    s~skip_bits(verifier::P1_SIZE);
    return (s, p1);
}

(slice, slice) load_p2(slice body) impure {
    cell c = body~load_ref();
    slice s = c.begin_parse();
    slice p2 = first_bits(s, verifier::P2_SIZE);
    s~skip_bits(verifier::P2_SIZE);
    return (s, p2);
}

(int) groth16Verify(
    slice pi_a,
    slice pi_b,
    slice pi_c,
    cell pubInputs
) impure {
    int res = 0;


    ;; extract public inputs by keys 0..nPublic-1
    (slice input0, int ok0) = pubInputs~udict_delete_get?(verifier::publicInputKeyLen, 0);
    throw_unless(verifier::err::public_not_present, ok0);
    int val0 = input0~load_uint(256);
    (slice input1, int ok1) = pubInputs~udict_delete_get?(verifier::publicInputKeyLen, 1);
    throw_unless(verifier::err::public_not_present, ok1);
    int val1 = input1~load_uint(256);
    (slice input2, int ok2) = pubInputs~udict_delete_get?(verifier::publicInputKeyLen, 2);
    throw_unless(verifier::err::public_not_present, ok2);
    int val2 = input2~load_uint(256);
    (slice input3, int ok3) = pubInputs~udict_delete_get?(verifier::publicInputKeyLen, 3);
    throw_unless(verifier::err::public_not_present, ok3);
    int val3 = input3~load_uint(256);
    (slice input4, int ok4) = pubInputs~udict_delete_get?(verifier::publicInputKeyLen, 4);
    throw_unless(verifier::err::public_not_present, ok4);
    int val4 = input4~load_uint(256);
    (slice input5, int ok5) = pubInputs~udict_delete_get?(verifier::publicInputKeyLen, 5);
    throw_unless(verifier::err::public_not_present, ok5);
    int val5 = input5~load_uint(256);
    (slice input6, int ok6) = pubInputs~udict_delete_get?(verifier::publicInputKeyLen, 6);
    throw_unless(verifier::err::public_not_present, ok6);
    int val6 = input6~load_uint(256);
    (slice input7, int ok7) = pubInputs~udict_delete_get?(verifier::publicInputKeyLen, 7);
    throw_unless(verifier::err::public_not_present, ok7);
    int val7 = input7~load_uint(256);
    (slice input8, int ok8) = pubInputs~udict_delete_get?(verifier::publicInputKeyLen, 8);
    throw_unless(verifier::err::public_not_present, ok8);
    int val8 = input8~load_uint(256);
    (slice input9, int ok9) = pubInputs~udict_delete_get?(verifier::publicInputKeyLen, 9);
    throw_unless(verifier::err::public_not_present, ok9);
    int val9 = input9~load_uint(256);
    (slice input10, int ok10) = pubInputs~udict_delete_get?(verifier::publicInputKeyLen, 10);
    throw_unless(verifier::err::public_not_present, ok10);
    int val10 = input10~load_uint(256);
    (slice input11, int ok11) = pubInputs~udict_delete_get?(verifier::publicInputKeyLen, 11);
    throw_unless(verifier::err::public_not_present, ok11);
    int val11 = input11~load_uint(256);
    (slice input12, int ok12) = pubInputs~udict_delete_get?(verifier::publicInputKeyLen, 12);
    throw_unless(verifier::err::public_not_present, ok12);
    int val12 = input12~load_uint(256);
    (slice input13, int ok13) = pubInputs~udict_delete_get?(verifier::publicInputKeyLen, 13);
    throw_unless(verifier::err::public_not_present, ok13);
    int val13 = input13~load_uint(256);
    (slice input14, int ok14) = pubInputs~udict_delete_get?(verifier::publicInputKeyLen, 14);
    throw_unless(verifier::err::public_not_present, ok14);
    int val14 = input14~load_uint(256);
    (slice input15, int ok15) = pubInputs~udict_delete_get?(verifier::publicInputKeyLen, 15);
    throw_unless(verifier::err::public_not_present, ok15);
    int val15 = input15~load_uint(256);
    (slice input16, int ok16) = pubInputs~udict_delete_get?(verifier::publicInputKeyLen, 16);
    throw_unless(verifier::err::public_not_present, ok16);
    int val16 = input16~load_uint(256);
    (slice input17, int ok17) = pubInputs~udict_delete_get?(verifier::publicInputKeyLen, 17);
    throw_unless(verifier::err::public_not_present, ok17);
    int val17 = input17~load_uint(256);
    (slice input18, int ok18) = pubInputs~udict_delete_get?(verifier::publicInputKeyLen, 18);
    throw_unless(verifier::err::public_not_present, ok18);
    int val18 = input18~load_uint(256);
    (slice input19, int ok19) = pubInputs~udict_delete_get?(verifier::publicInputKeyLen, 19);
    throw_unless(verifier::err::public_not_present, ok19);
    int val19 = input19~load_uint(256);
    (slice input20, int ok20) = pubInputs~udict_delete_get?(verifier::publicInputKeyLen, 20);
    throw_unless(verifier::err::public_not_present, ok20);
    int val20 = input20~load_uint(256);
    (slice input21, int ok21) = pubInputs~udict_delete_get?(verifier::publicInputKeyLen, 21);
    throw_unless(verifier::err::public_not_present, ok21);
    int val21 = input21~load_uint(256);
    (slice input22, int ok22) = pubInputs~udict_delete_get?(verifier::publicInputKeyLen, 22);
    throw_unless(verifier::err::public_not_present, ok22);
    int val22 = input22~load_uint(256);
    (slice input23, int ok23) = pubInputs~udict_delete_get?(verifier::publicInputKeyLen, 23);
    throw_unless(verifier::err::public_not_present, ok23);
    int val23 = input23~load_uint(256);
    (slice input24, int ok24) = pubInputs~udict_delete_get?(verifier::publicInputKeyLen, 24);
    throw_unless(verifier::err::public_not_present, ok24);
    int val24 = input24~load_uint(256);
    (slice input25, int ok25) = pubInputs~udict_delete_get?(verifier::publicInputKeyLen, 25);
    throw_unless(verifier::err::public_not_present, ok25);
    int val25 = input25~load_uint(256);
    (slice input26, int ok26) = pubInputs~udict_delete_get?(verifier::publicInputKeyLen, 26);
    throw_unless(verifier::err::public_not_present, ok26);
    int val26 = input26~load_uint(256);
    (slice input27, int ok27) = pubInputs~udict_delete_get?(verifier::publicInputKeyLen, 27);
    throw_unless(verifier::err::public_not_present, ok27);
    int val27 = input27~load_uint(256);
    (slice input28, int ok28) = pubInputs~udict_delete_get?(verifier::publicInputKeyLen, 28);
    throw_unless(verifier::err::public_not_present, ok28);
    int val28 = input28~load_uint(256);
    (slice input29, int ok29) = pubInputs~udict_delete_get?(verifier::publicInputKeyLen, 29);
    throw_unless(verifier::err::public_not_present, ok29);
    int val29 = input29~load_uint(256);
    (slice input30, int ok30) = pubInputs~udict_delete_get?(verifier::publicInputKeyLen, 30);
    throw_unless(verifier::err::public_not_present, ok30);
    int val30 = input30~load_uint(256);
    (slice input31, int ok31) = pubInputs~udict_delete_get?(verifier::publicInputKeyLen, 31);
    throw_unless(verifier::err::public_not_present, ok31);
    int val31 = input31~load_uint(256);
    (slice input32, int ok32) = pubInputs~udict_delete_get?(verifier::publicInputKeyLen, 32);
    throw_unless(verifier::err::public_not_present, ok32);
    int val32 = input32~load_uint(256);
    (slice input33, int ok33) = pubInputs~udict_delete_get?(verifier::publicInputKeyLen, 33);
    throw_unless(verifier::err::public_not_present, ok33);
    int val33 = input33~load_uint(256);
    (slice input34, int ok34) = pubInputs~udict_delete_get?(verifier::publicInputKeyLen, 34);
    throw_unless(verifier::err::public_not_present, ok34);
    int val34 = input34~load_uint(256);
    (slice input35, int ok35) = pubInputs~udict_delete_get?(verifier::publicInputKeyLen, 35);
    throw_unless(verifier::err::public_not_present, ok35);
    int val35 = input35~load_uint(256);
    (slice input36, int ok36) = pubInputs~udict_delete_get?(verifier::publicInputKeyLen, 36);
    throw_unless(verifier::err::public_not_present, ok36);
    int val36 = input36~load_uint(256);
    (slice input37, int ok37) = pubInputs~udict_delete_get?(verifier::publicInputKeyLen, 37);
    throw_unless(verifier::err::public_not_present, ok37);
    int val37 = input37~load_uint(256);
    (slice input38, int ok38) = pubInputs~udict_delete_get?(verifier::publicInputKeyLen, 38);
    throw_unless(verifier::err::public_not_present, ok38);
    int val38 = input38~load_uint(256);
    (slice input39, int ok39) = pubInputs~udict_delete_get?(verifier::publicInputKeyLen, 39);
    throw_unless(verifier::err::public_not_present, ok39);
    int val39 = input39~load_uint(256);
    (slice input40, int ok40) = pubInputs~udict_delete_get?(verifier::publicInputKeyLen, 40);
    throw_unless(verifier::err::public_not_present, ok40);
    int val40 = input40~load_uint(256);
    (slice input41, int ok41) = pubInputs~udict_delete_get?(verifier::publicInputKeyLen, 41);
    throw_unless(verifier::err::public_not_present, ok41);
    int val41 = input41~load_uint(256);
    (slice input42, int ok42) = pubInputs~udict_delete_get?(verifier::publicInputKeyLen, 42);
    throw_unless(verifier::err::public_not_present, ok42);
    int val42 = input42~load_uint(256);
    (slice input43, int ok43) = pubInputs~udict_delete_get?(verifier::publicInputKeyLen, 43);
    throw_unless(verifier::err::public_not_present, ok43);
    int val43 = input43~load_uint(256);
    (slice input44, int ok44) = pubInputs~udict_delete_get?(verifier::publicInputKeyLen, 44);
    throw_unless(verifier::err::public_not_present, ok44);
    int val44 = input44~load_uint(256);
    (slice input45, int ok45) = pubInputs~udict_delete_get?(verifier::publicInputKeyLen, 45);
    throw_unless(verifier::err::public_not_present, ok45);
    int val45 = input45~load_uint(256);
    (slice input46, int ok46) = pubInputs~udict_delete_get?(verifier::publicInputKeyLen, 46);
    throw_unless(verifier::err::public_not_present, ok46);
    int val46 = input46~load_uint(256);
    (slice input47, int ok47) = pubInputs~udict_delete_get?(verifier::publicInputKeyLen, 47);
    throw_unless(verifier::err::public_not_present, ok47);
    int val47 = input47~load_uint(256);
    (slice input48, int ok48) = pubInputs~udict_delete_get?(verifier::publicInputKeyLen, 48);
    throw_unless(verifier::err::public_not_present, ok48);
    int val48 = input48~load_uint(256);
    (slice input49, int ok49) = pubInputs~udict_delete_get?(verifier::publicInputKeyLen, 49);
    throw_unless(verifier::err::public_not_present, ok49);
    int val49 = input49~load_uint(256);
    (slice input50, int ok50) = pubInputs~udict_delete_get?(verifier::publicInputKeyLen, 50);
    throw_unless(verifier::err::public_not_present, ok50);
    int val50 = input50~load_uint(256);
    (slice input51, int ok51) = pubInputs~udict_delete_get?(verifier::publicInputKeyLen, 51);
    throw_unless(verifier::err::public_not_present, ok51);
    int val51 = input51~load_uint(256);
    (slice input52, int ok52) = pubInputs~udict_delete_get?(verifier::publicInputKeyLen, 52);
    throw_unless(verifier::err::public_not_present, ok52);
    int val52 = input52~load_uint(256);
    (slice input53, int ok53) = pubInputs~udict_delete_get?(verifier::publicInputKeyLen, 53);
    throw_unless(verifier::err::public_not_present, ok53);
    int val53 = input53~load_uint(256);
    (slice input54, int ok54) = pubInputs~udict_delete_get?(verifier::publicInputKeyLen, 54);
    throw_unless(verifier::err::public_not_present, ok54);
    int val54 = input54~load_uint(256);
    (slice input55, int ok55) = pubInputs~udict_delete_get?(verifier::publicInputKeyLen, 55);
    throw_unless(verifier::err::public_not_present, ok55);
    int val55 = input55~load_uint(256);
    (slice input56, int ok56) = pubInputs~udict_delete_get?(verifier::publicInputKeyLen, 56);
    throw_unless(verifier::err::public_not_present, ok56);
    int val56 = input56~load_uint(256);
    (slice input57, int ok57) = pubInputs~udict_delete_get?(verifier::publicInputKeyLen, 57);
    throw_unless(verifier::err::public_not_present, ok57);
    int val57 = input57~load_uint(256);
    (slice input58, int ok58) = pubInputs~udict_delete_get?(verifier::publicInputKeyLen, 58);
    throw_unless(verifier::err::public_not_present, ok58);
    int val58 = input58~load_uint(256);
    (slice input59, int ok59) = pubInputs~udict_delete_get?(verifier::publicInputKeyLen, 59);
    throw_unless(verifier::err::public_not_present, ok59);
    int val59 = input59~load_uint(256);
    (slice input60, int ok60) = pubInputs~udict_delete_get?(verifier::publicInputKeyLen, 60);
    throw_unless(verifier::err::public_not_present, ok60);
    int val60 = input60~load_uint(256);
    (slice input61, int ok61) = pubInputs~udict_delete_get?(verifier::publicInputKeyLen, 61);
    throw_unless(verifier::err::public_not_present, ok61);
    int val61 = input61~load_uint(256);
    (slice input62, int ok62) = pubInputs~udict_delete_get?(verifier::publicInputKeyLen, 62);
    throw_unless(verifier::err::public_not_present, ok62);
    int val62 = input62~load_uint(256);
    (slice input63, int ok63) = pubInputs~udict_delete_get?(verifier::publicInputKeyLen, 63);
    throw_unless(verifier::err::public_not_present, ok63);
    int val63 = input63~load_uint(256);
    (slice input64, int ok64) = pubInputs~udict_delete_get?(verifier::publicInputKeyLen, 64);
    throw_unless(verifier::err::public_not_present, ok64);
    int val64 = input64~load_uint(256);
    (slice input65, int ok65) = pubInputs~udict_delete_get?(verifier::publicInputKeyLen, 65);
    throw_unless(verifier::err::public_not_present, ok65);
    int val65 = input65~load_uint(256);
    (slice input66, int ok66) = pubInputs~udict_delete_get?(verifier::publicInputKeyLen, 66);
    throw_unless(verifier::err::public_not_present, ok66);
    int val66 = input66~load_uint(256);
    (slice input67, int ok67) = pubInputs~udict_delete_get?(verifier::publicInputKeyLen, 67);
    throw_unless(verifier::err::public_not_present, ok67);
    int val67 = input67~load_uint(256);
    (slice input68, int ok68) = pubInputs~udict_delete_get?(verifier::publicInputKeyLen, 68);
    throw_unless(verifier::err::public_not_present, ok68);
    int val68 = input68~load_uint(256);
    (slice input69, int ok69) = pubInputs~udict_delete_get?(verifier::publicInputKeyLen, 69);
    throw_unless(verifier::err::public_not_present, ok69);
    int val69 = input69~load_uint(256);
    (slice input70, int ok70) = pubInputs~udict_delete_get?(verifier::publicInputKeyLen, 70);
    throw_unless(verifier::err::public_not_present, ok70);
    int val70 = input70~load_uint(256);
    (slice input71, int ok71) = pubInputs~udict_delete_get?(verifier::publicInputKeyLen, 71);
    throw_unless(verifier::err::public_not_present, ok71);
    int val71 = input71~load_uint(256);
    (slice input72, int ok72) = pubInputs~udict_delete_get?(verifier::publicInputKeyLen, 72);
    throw_unless(verifier::err::public_not_present, ok72);
    int val72 = input72~load_uint(256);
    (slice input73, int ok73) = pubInputs~udict_delete_get?(verifier::publicInputKeyLen, 73);
    throw_unless(verifier::err::public_not_present, ok73);
    int val73 = input73~load_uint(256);
    (slice input74, int ok74) = pubInputs~udict_delete_get?(verifier::publicInputKeyLen, 74);
    throw_unless(verifier::err::public_not_present, ok74);
    int val74 = input74~load_uint(256);
    (slice input75, int ok75) = pubInputs~udict_delete_get?(verifier::publicInputKeyLen, 75);
    throw_unless(verifier::err::public_not_present, ok75);
    int val75 = input75~load_uint(256);
    (slice input76, int ok76) = pubInputs~udict_delete_get?(verifier::publicInputKeyLen, 76);
    throw_unless(verifier::err::public_not_present, ok76);
    int val76 = input76~load_uint(256);
    (slice input77, int ok77) = pubInputs~udict_delete_get?(verifier::publicInputKeyLen, 77);
    throw_unless(verifier::err::public_not_present, ok77);
    int val77 = input77~load_uint(256);
    (slice input78, int ok78) = pubInputs~udict_delete_get?(verifier::publicInputKeyLen, 78);
    throw_unless(verifier::err::public_not_present, ok78);
    int val78 = input78~load_uint(256);
    (slice input79, int ok79) = pubInputs~udict_delete_get?(verifier::publicInputKeyLen, 79);
    throw_unless(verifier::err::public_not_present, ok79);
    int val79 = input79~load_uint(256);
    (slice input80, int ok80) = pubInputs~udict_delete_get?(verifier::publicInputKeyLen, 80);
    throw_unless(verifier::err::public_not_present, ok80);
    int val80 = input80~load_uint(256);

    ;; ensure the dict is now empty
    throw_unless(verifier::err::too_many_publics, null?(pubInputs));

    ;; assemble cpub via batched MULTIEXP and summation
    slice cpub = bls_g1_multiexp_7(
        verifier::IC1, val0,
        verifier::IC2, val1,
        verifier::IC3, val2,
        verifier::IC4, val3,
        verifier::IC5, val4,
        verifier::IC6, val5,
        verifier::IC7, val6
        , 7
    );
    cpub = bls_g1_add(cpub, bls_g1_multiexp_7(
        verifier::IC8, val7,
        verifier::IC9, val8,
        verifier::IC10, val9,
        verifier::IC11, val10,
        verifier::IC12, val11,
        verifier::IC13, val12,
        verifier::IC14, val13
        , 7
    ));
    cpub = bls_g1_add(cpub, bls_g1_multiexp_7(
        verifier::IC15, val14,
        verifier::IC16, val15,
        verifier::IC17, val16,
        verifier::IC18, val17,
        verifier::IC19, val18,
        verifier::IC20, val19,
        verifier::IC21, val20
        , 7
    ));
    cpub = bls_g1_add(cpub, bls_g1_multiexp_7(
        verifier::IC22, val21,
        verifier::IC23, val22,
        verifier::IC24, val23,
        verifier::IC25, val24,
        verifier::IC26, val25,
        verifier::IC27, val26,
        verifier::IC28, val27
        , 7
    ));
    cpub = bls_g1_add(cpub, bls_g1_multiexp_7(
        verifier::IC29, val28,
        verifier::IC30, val29,
        verifier::IC31, val30,
        verifier::IC32, val31,
        verifier::IC33, val32,
        verifier::IC34, val33,
        verifier::IC35, val34
        , 7
    ));
    cpub = bls_g1_add(cpub, bls_g1_multiexp_7(
        verifier::IC36, val35,
        verifier::IC37, val36,
        verifier::IC38, val37,
        verifier::IC39, val38,
        verifier::IC40, val39,
        verifier::IC41, val40,
        verifier::IC42, val41
        , 7
    ));
    cpub = bls_g1_add(cpub, bls_g1_multiexp_7(
        verifier::IC43, val42,
        verifier::IC44, val43,
        verifier::IC45, val44,
        verifier::IC46, val45,
        verifier::IC47, val46,
        verifier::IC48, val47,
        verifier::IC49, val48
        , 7
    ));
    cpub = bls_g1_add(cpub, bls_g1_multiexp_7(
        verifier::IC50, val49,
        verifier::IC51, val50,
        verifier::IC52, val51,
        verifier::IC53, val52,
        verifier::IC54, val53,
        verifier::IC55, val54,
        verifier::IC56, val55
        , 7
    ));
    cpub = bls_g1_add(cpub, bls_g1_multiexp_7(
        verifier::IC57, val56,
        verifier::IC58, val57,
        verifier::IC59, val58,
        verifier::IC60, val59,
        verifier::IC61, val60,
        verifier::IC62, val61,
        verifier::IC63, val62
        , 7
    ));
    cpub = bls_g1_add(cpub, bls_g1_multiexp_7(
        verifier::IC64, val63,
        verifier::IC65, val64,
        verifier::IC66, val65,
        verifier::IC67, val66,
        verifier::IC68, val67,
        verifier::IC69, val68,
        verifier::IC70, val69
        , 7
    ));
    cpub = bls_g1_add(cpub, bls_g1_multiexp_7(
        verifier::IC71, val70,
        verifier::IC72, val71,
        verifier::IC73, val72,
        verifier::IC74, val73,
        verifier::IC75, val74,
        verifier::IC76, val75,
        verifier::IC77, val76
        , 7
    ));
    cpub = bls_g1_add(cpub, bls_g1_multiexp_4(
        verifier::IC78, val77,
        verifier::IC79, val78,
        verifier::IC80, val79,
        verifier::IC81, val80
        , 4
    ));

    ;; add the free term IC0
    cpub = bls_g1_add(cpub, verifier::IC0);

    ;; pairing check
    slice pi_a_neg = bls_g1_neg(pi_a);
    int a = bls_pairing(
        cpub,              verifier::vk_gamma_2,
        pi_a_neg,          pi_b,
        pi_c,              verifier::vk_delta_2,
        verifier::vk_alpha_1, verifier::vk_beta_2,
        4
    );

    if (a == 0) {
        res = 0;
    } else {
        res = 1;
    }
    return (res);
}

(int) verify(
    slice in_msg_body
) impure {
    slice pi_a = in_msg_body~load_p1();
    slice pi_b = in_msg_body~load_p2();
    slice pi_c = in_msg_body~load_p1();
    var pubInputs = in_msg_body~load_dict();

    return groth16Verify(
        pi_a,
        pi_b,
        pi_c,
        pubInputs
    );
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        return ();
    }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) {
        return ();
    }
    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    if (op == op::verify) {
        int res = verify(in_msg_body);

        throw_unless(300, res == 1);
        return ();
    }
    throw(0xffff);
}

int get_verify(
    slice pi_a,
    slice pi_b,
    slice pi_c,
    slice pubInputs
) method_id {
    return groth16Verify(
        pi_a,
        pi_b,
        pi_c,
        pubInputs~load_dict()
    );
}
